// Implementation of a KeyValueServer. Students should write their code in this file.


package p0partA

import (
	"github.com/cmu440/p0partA/kvstore"
	"fmt"
	"net"
	"strconv"
	"bufio"
	"bytes"
)

const sendChannelBufferSize int = 500

type keyValueServer struct {
	// TODO: implement this!
	clientNum int
	listener net.Listener
	// 用于 维护 conn 和 对应的通道
	channelMap map[net.Conn]chan []byte
	// 用于保存 conn 发送过来的msg 的通道
	readChan chan []byte

	store kvstore.KVStore
}

// New creates and returns (but does not start) a new KeyValueServer.
func New(store kvstore.KVStore) KeyValueServer {
	// TODO: implement this!
	var server keyValueServer
	
	server.clientNum = 0
	server.listener = nil
	server.readChan = make(chan []byte)
	server.channelMap = make(map[net.Conn]chan []byte)

	server.store = store
	
	// 使用接口时，返回接口类型变量， 参考 book p113
	return &server
}

func (kvs *keyValueServer) Start(port int) error {
	// TODO: implement this!
	laddr := ":" + strconv.Itoa(port)

	// 初始化 监听本地服务, 并将变量赋值给 kvs
	listener, err := net.Listen("tcp", laddr)

	/*
	A Listener is a generic network listener for stream-oriented protocols.
	Multiple goroutines may invoke methods on a Listener simultaneously.
	type Listener interface {
	    // Accept waits for and returns the next connection to the listener.
	    Accept() (Conn, error)

	    // Close closes the listener.
	    // Any blocked Accept operations will be unblocked and return errors.
	    Close() error

	    // Addr returns the listener's network address.
	    Addr() Addr
	}
	*/

	if err != nil {
		fmt.Println("error in starting a listener!")
		return nil
	}

	kvs.listener = listener
	// 进行response 的处理， 也就是 核心代码

	go kvs.handleOutStuff()


	// Track client statuses and process DB requests
	go func(){
        for{
			// Conn is a generic stream-oriented network connection.
			// Accept waits for and returns the next connection to the listener.
			// Accept() (Conn, error)
            conn,err := kvs.listener.Accept()
            if err != nil{
                return
			}
			// 新建一个进程意味着，增加一个client
			fmt.Println("has already added a client")
			kvs.clientNum++

			// 解析 connection 请求
            go kvs.readCommd(conn)
        }
    }()

	return nil
}

func (kvs *keyValueServer) readCommd(conn net.Conn){
	// 为什么要将 conn 杀掉
	defer conn.Close()

	bufReader := bufio.NewReader(conn)
	// 根据某个新建 conn 建立一个 chan, 用于 ? 
	kvs.channelMap[conn] = make(chan []byte, sendChannelBufferSize)

	// 处理 client 发送过来的请求
	go kvs.sendStuff(conn)

	// 根据conn 发送response

	for{
		/*
		func (b *Reader) ReadBytes(delim byte) ([]byte, error)
		ReadBytes reads until the first occurrence of delim in the input, 
		returning a slice containing the data up to and including the delimiter. 
		If ReadBytes encounters an error before finding a delimiter, 
		it returns the data read before the error and the error itself (often io.EOF). 
		ReadBytes returns err != nil if and only if the returned data does not end in delim.
		For simple uses, a Scanner may be more convenient.
		*/

		line, err := bufReader.ReadBytes('\n')
		_ = err
		// 设计的机制是 一旦从 bufReader中不能正确读取信息，就将相应的conn杀掉
		// if err != nil{
		// 	fmt.Println("erro @ ReadBytes_parseResq")
		// 	delete(kvs.channelMap, conn)
		// 	kvs.clientNum--
		// 	break
		// }

		line = bytes.TrimSuffix(line, []byte("\n"))
		cmd_list := bytes.Split(line, []byte(":"))


		if len(cmd_list) == 3 && string(cmd_list[0]) == "Put" {
			// fmt.Println("using Put commd :")
			k := string(cmd_list[1])
			v := cmd_list[2]

			kvs.store.Put(k, v)

		} else if len(cmd_list) == 2 && string(cmd_list[0]) == "Get" {
			// fmt.Println("using Get commd :")
			k := string(cmd_list[1])
			msg := kvs.store.Get(k)

			for _, item := range msg{
				item=append(item, (byte)('\n'))
				// item=append(item, '\n')
				_, err := conn.Write(item)
				if err != nil{
					delete(kvs.channelMap, conn)
				}
			}
		} else if len(cmd_list) == 2 && string(cmd_list[0]) == "Delete" {
			// fmt.Println("using Delete commd :")
			k := string(cmd_list[1])
			kvs.store.Clear(k)
		}
		
		/*
		写给服务器
		为什么长度总是 0
		fmt.Println("readStuff:kvs.readChan:", len(kvs.readChan))
		*/
		// kvs.readChan<-msg
	
	}
	

}

func (kvs *keyValueServer) sendStuff(conn net.Conn){
	// channelMap map[net.Conn] chan []byte
	sendChannel, exists := kvs.channelMap[conn]
	if !exists{
		fmt.Println("error @ sendStuff: error when get value by key")
		return
	}
	for{
		// 从 channel 中 读数据，读到msg变量中, 发送回 client
		msg := <- sendChannel
		// conn 可以read 也可以 write, interesting 
		_, err := conn.Write(msg)
		if err != nil{
			delete(kvs.channelMap, conn)
		}
	}
}


func (kvs *keyValueServer) handleOutStuff(){
	for {
		msg := <-kvs.readChan
		fmt.Println("handleOutStuff:total clients:",len(kvs.channelMap))
		for _, sendChan := range kvs.channelMap{
			// 大于500条的信息丢弃
			if len(sendChan) < sendChannelBufferSize{
				sendChan <-msg
			}
		}
	}
}


func (kvs *keyValueServer) Close() {
	// TODO: implement this!
	if kvs.listener != nil{
		kvs.listener.Close()
	}
	kvs.clientNum = 0
}

func (kvs *keyValueServer) CountActive() int {
	// TODO: implement this!
	return kvs.clientNum
}

func (kvs *keyValueServer) CountDropped() int {
	// TODO: implement this!

	return kvs.clientNum
}

// TODO: add additional methods/functions below!


/*

func main() {
	var c1, c2, c3 chan int
	var i1, i2 int
	select {
	   case i1 = <-c1:
		  fmt.Printf("received ", i1, " from c1\n")
	   case c2 <- i2:
		  fmt.Printf("sent ", i2, " to c2\n")
	   case i3, ok := (<-c3):  // same as: i3, ok := <-c3
		  if ok {
			 fmt.Printf("received ", i3, " from c3\n")
		  } else {
			 fmt.Printf("c3 is closed\n")
		  }
	   default:
		  fmt.Printf("no communication\n")
	}
 }  

 */